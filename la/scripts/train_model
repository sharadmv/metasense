#!/usr/bin/env python
import numpy as np
from pyearth import Earth
import pandas as pd
import sys
from argparse import ArgumentParser
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.pipeline import make_pipeline
from sklearn.linear_model import LinearRegression, Ridge, Lasso
import pickle

def parse_args():
    argparser = ArgumentParser()

    argparser.add_argument('--x', nargs='+')
    argparser.add_argument('--output', default='out')
    argparser.add_argument('--degree', type=int, default=1)
    argparser.add_argument('--save_model', default=None)
    argparser.add_argument('y')

    return argparser.parse_args()

if __name__ == "__main__":
    args = parse_args()

    data = pd.read_csv(sys.stdin, index_col='time')
    data.index = pd.to_datetime(data.index).tz_localize('US/Pacific')

    X = data[args.x]
    y = data[args.y]

    # earth = Earth()

    cf = make_pipeline(StandardScaler(), PolynomialFeatures(args.degree), LinearRegression())
    cf.fit(X, y)

    preds = cf.predict(X)

    # print(earth.summary(), file=sys.stderr)

    # print('R^2: %s' % cf.score(X, y), file=sys.stderr)
    print("RMSE: %.3f" % np.sqrt(np.mean((preds - y) ** 2)), file=sys.stderr)
    # print('Coefficients: %s' % cf.coef_, file=sys.stderr)
    # print('Intercept: %s' % cf.intercept_, file=sys.stderr)

    data[args.output] = preds

    if args.save_model is not None:
        with open(args.save_model, 'wb') as fp:
            pickle.dump((args.x, args.y, cf), fp)

    # print(data.to_csv(index_label='time'))
